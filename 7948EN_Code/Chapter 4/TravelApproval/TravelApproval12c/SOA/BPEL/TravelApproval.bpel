<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Jul 06 14:56:47 GST 2020
  Author:  aelkhodary
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="TravelApproval"
               targetNamespace="http://packthup.com/bpel/travel/"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://packthup.com/bpel/travel/"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:ns1="http://packtpub.com/bpel/travel/"
                xmlns:ns2="http://packtpub.com/service/airline/"
               xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ui="http://xmlns.oracle.com/soa/designer"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ess="http://xmlns.oracle.com/scheduler" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns3="http://packtpub.com/service/employee/"
         xmlns:ns4="http://schemas.xmlsoap.org/ws/2003/03/addressing" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <import namespace="http://packtpub.com/service/airline/" location="../WSDLs/Airline.wsdl"
          importType="http://schemas.xmlsoap.org/wsdl/"/>
  <import namespace="http://packtpub.com/bpel/travel/" location="../WSDLs/TravelApprovalWrapper.wsdl"
          importType="http://schemas.xmlsoap.org/wsdl/" ui:processWSDL="true"/>
  <import namespace="http://packtpub.com/bpel/travel/" location="../WSDLs/TravelApproval.wsdl"
          importType="http://schemas.xmlsoap.org/wsdl/"/>
 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    
    <!--partnerLink name="travelapproval" partnerLinkType="ns1:travelLT" myRole="travelService"/-->
    <partnerLink name="travelapproval" partnerLinkType="ns1:travelLT" myRole="travelService"/>
    <partnerLink name="EmployeeTravelStatus" partnerLinkType="ns3:EmployeeTravelStatus"
                 partnerRole="EmployeeTravelStatusPT"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="TravelRequest" messageType="ns1:TravelRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="TravelResponse" messageType="ns2:TravelResponseMessage"/>
    <variable name="FlightDetails" messageType="ns2:FlightTicketRequestMessage"/>
    <variable name="index" type="xsd:int"/>
    <variable name="CombinedFlightResponse" messageType="ns2:TravelResponseMessage"/>
    <variable name="TempResponse" messageType="ns2:TravelResponseMessage"/>
    <variable name="TravelResponseE"  messageType="ns2:ReservationResponseMessage"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in TravelApproval.wsdl) -->
    <receive name="receiveInput" partnerLink="travelapproval" portType="ns1:TravelApprovalPT" operation="TravelApproval"
             variable="TravelRequest" createInstance="yes"/>
    <scope name="RetrieveEmployeeTravelStatus">
      <variables>
        <variable name="EmpmployeeTravelStatusRequest" messageType="ns3:EmployeeTravelStatusRequestMessage"/>
        <variable name="EmployeeTravelStatusResponse" messageType="ns3:EmployeeTravelStatusResponseMessage"/>
      </variables>
      <sequence name="Sequence1">
        <assign name="Assign-Employee">
          <copy>
            <from>$TravelRequest.travelRequest/employee</from>
            <to>$EmpmployeeTravelStatusRequest.employee</to>
          </copy>
        </assign>
        <invoke name="Invoke-EmployeeTravelStatus" partnerLink="EmployeeTravelStatus"
                portType="ns3:EmployeeTravelStatusPT" operation="EmployeeTravelStatus"
                inputVariable="EmpmployeeTravelStatusRequest" outputVariable="EmployeeTravelStatusResponse"
                bpelx:invokeAsDetail="no"/>
        <assign name="Assign-FlightDetails">
          <copy>
            <from>$TravelRequest.travelRequest/flightData</from>
            <to>$FlightDetails.flightTicketRequest/ns2:flightData</to>
          </copy>
          <copy>
            <from>1</from>
            <to>$index</to>
          </copy>
          <copy>
            <from>$EmployeeTravelStatusResponse.travelClass</from>
            <to>$FlightDetails.flightTicketRequest/ns2:travelClass</to>
          </copy>
        </assign>
      </sequence>
    </scope>
    <scope name="CheckFlightAvailability">
     <variables>
              <variable name="FlightResponse" messageType="ns2:TravelResponseMessage"/>
            </variables>
      <compensationHandler>
        <empty/>
      </compensationHandler>
      <sequence name="Sequence5">
        <forEach parallel="yes" counterName="ForEach1Counter" name="ForEach">
          <startCounterValue>$index</startCounterValue>
          <finalCounterValue>count($TravelRequest.travelRequest/airlineData/ns1:AirlineLink)</finalCounterValue>
          <scope name="Scope1">
            <partnerLinks>
              <partnerLink name="AirLine" partnerLinkType="ns2:flightLT" myRole="airlineCustomer"
                           partnerRole="airlineService"/>
            </partnerLinks>
            <sequence name="Sequence6">
              <assign name="AssignEndpointReference">
                <copy>
                  <from>$TravelRequest.travelRequest/airlineData/ns1:AirlineLink[number(1)]/ns4:EndpointReference</from>
                  <to partnerLink="AirLine"/>
                </copy>
              </assign>
              <invoke name="AirLine" partnerLink="AirLine"
                      portType="ns2:FlightAvailabilityPT" inputVariable="FlightDetails"
                      operation="FlightAvailability" bpelx:invokeAsDetail="no"/>
              <receive name="AirLine" partnerLink="AirLine" portType="ns2:FlightCallbackPT" variable="FlightResponse"
                       operation="FlightTicketCallback"/>
              <assign name="AppendResult">
                <copy>
                  <from variable="FlightResponse"/>
                  <to variable="CombinedFlightResponse"/>
                </copy>
              </assign>
            </sequence>
          </scope>
        </forEach>
      </sequence>
    </scope>
    <scope name="SelectAirline">
      <sequence name="Sequence7">
        <assign name="Initialized">
          <copy>
            <from>number(0)</from>
            <to>$index</to>
          </copy>
          <copy>
            <from>$CombinedFlightResponse.confirmationData[1]</from>
            <to>$TravelResponse</to>
          </copy>
        </assign>
        <while name="While">
          <condition>$index &lt; count($TravelRequest.travelRequest/airlineData/ns1:AirlineLink)</condition>
          <sequence>
            <assign name="prepareData">
              <copy>
                <from>$index +1</from>
                <to>$index</to>
              </copy>
              <copy>
                <from>$CombinedFlightResponse.confirmationData[$index]</from>
                <to>$TempResponse</to>
              </copy>
            </assign>
            <if name="If">
              <documentation>
                <![CDATA[Cheaper founded]]>
              </documentation>
              <condition>$TempResponse.confirmationData/Price&lt;$TravelResponse.confirmationData/Price</condition>
              <sequence name="Sequence3">
                <assign name="UpdateTravelResponse">
                  <copy>
                    <from variable="TempResponse"/>
                    <to variable="TravelResponse"/>
                  </copy>
                </assign>
              </sequence>
              <else>
                <sequence name="Sequence4">
                  <empty/>
                </sequence>
              </else>
            </if>
          </sequence>
        </while>
      </sequence>
    </scope>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="travelapproval" portType="ns1:TravelApprovalPT" operation="TravelApproval"
           variable="TravelResponseE"/>
  </sequence>
</process>